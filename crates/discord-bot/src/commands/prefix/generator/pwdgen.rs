use serenity::all::{Color, Message};
use serenity::all::standard::Args;
use serenity::builder::{CreateEmbed, CreateEmbedAuthor, CreateEmbedFooter, CreateMessage};
use serenity::client::Context;
use serenity::framework::standard::CommandResult;
use serenity::framework::standard::macros::command;

use crate::helpers::generator::random_number_generator;

#[command]
#[description = "Generates a random password, default password length is 8."]
pub async fn pwdgen(ctx: &Context, msg: &Message, mut args: Args) -> CommandResult {
    let characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
    let len = characters.len() as u32;
    let mut pwd = String::new();

    let length = match args.single::<u8>() {
        Ok(n) => n,
        Err(why) => {
            match why.to_string() {
                err if err.contains("invalid digit found in string") => {
                    msg.channel_id
                        .send_message(ctx, CreateMessage::new()
                            .embed(CreateEmbed::new()
                                .title("Random password")
                                .description("Please enter a valid number.")
                                .color(Color::RED)
                                .footer(CreateEmbedFooter::new("Random password generated by the bot."))
                                .author(CreateEmbedAuthor::new(format!("{} has request for random password", msg.author.name)))
                            ),
                        ).await?;

                    return Ok(());
                }
                err if err.contains("number too large to fit in target type") => {
                    msg.channel_id
                        .send_message(ctx, CreateMessage::new()
                            .embed(CreateEmbed::new()
                                .title("Random password")
                                .description(format!("Password length is too long! Max length is {}.", u8::MAX))
                                .color(Color::RED)
                                .footer(CreateEmbedFooter::new("Random password generated by the bot."))
                                .author(CreateEmbedAuthor::new(format!("{} has request for random password", msg.author.name)))
                            ),
                        ).await?;

                    return Ok(());
                }
                _ => 8,
            }
        }
    };

    for _ in 0..length {
        let n = random_number_generator(1..len).await;
        if let Some(char) = characters.chars().nth(n as usize) {
            pwd.push(char);
        }
    }

    msg.channel_id
        .send_message(ctx, CreateMessage::new()
            .embed(CreateEmbed::new()
                .title("Random password")
                .description(pwd.to_string())
                .color(Color::DARK_GREEN)
                .footer(CreateEmbedFooter::new("Random password generated by the bot."))
                .author(CreateEmbedAuthor::new(format!("{} has request for random password", msg.author.name)))
            ),
        ).await?;

    Ok(())
}

