use serenity::all::standard::Args;
use serenity::all::{Color, Message};
use serenity::builder::{CreateEmbed, CreateEmbedAuthor, CreateEmbedFooter, CreateMessage};
use serenity::client::Context;
use serenity::framework::standard::macros::command;
use serenity::framework::standard::CommandResult;

use crate::helpers::generator::random_number_generator;
use crate::helpers::CHARACTERS;

#[command]
#[description = "Generates a random password, default password length is 8."]
pub async fn pwdgen(ctx: &Context, msg: &Message, mut args: Args) -> CommandResult {
    let input = args.single::<u8>().map_err(|err| {
        let err = err.to_string();

        if err.contains("invalid digit found in string") {
            build_response(&msg.author.name, "Please enter a valid number.", Color::RED)
        } else {
            build_response(
                &msg.author.name,
                format!("Password length is too long! Max length is {}.", u8::MAX).as_str(),
                Color::RED,
            )
        }
    });

    let length = match input {
        Ok(n) => n,
        Err(response) => {
            msg.channel_id.send_message(ctx, response).await?;

            return Ok(());
        }
    };

    let password = generate_password(length).await;

    msg.channel_id
        .send_message(
            ctx,
            build_response(&msg.author.name, password.as_str(), Color::DARK_GREEN),
        )
        .await?;

    Ok(())
}

async fn generate_password(len: u8) -> String {
    let mut pwd = String::new();

    for _ in 0..len {
        let n = random_number_generator(1..len as u32).await;
        if let Some(char) = CHARACTERS.chars().nth(n as usize) {
            pwd.push(char);
        }
    }

    pwd
}

fn build_response(author: &str, content: &str, color: Color) -> CreateMessage {
    CreateMessage::new().embed(
        CreateEmbed::new()
            .title("Random password")
            .description(content)
            .color(color)
            .footer(CreateEmbedFooter::new(
                "Random password generated by the bot.",
            ))
            .author(CreateEmbedAuthor::new(format!(
                "{} has request for random password",
                author
            ))),
    )
}
